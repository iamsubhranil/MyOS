#pragma once

#include "myos.h"
#include "system.h"

/*
 *  for each entry in syscall_list.h, a couple of things will
 *  be generated by this interface:
 *  1. an entry in the enum 'Id'
 *  2. a type specific Syscall::func signature, which should
 *  be the preferred mode of use by the user mode caller.
 *  3. an external linkage to 'func', with specific signature,
 *  so that it can be defined in the file which provides the
 *  service.
 *  4. all syscalls must return int
 *  5. all arguments of all syscalls must be castable to intptr_t
 */

struct Syscall {

	static constexpr int InterruptNumber = 0x80;

	static void handleSyscall(Register *r);
	static void init();

	enum class Id : u32 {
#define SYSCALL0(x) x,
#define SYSCALL1(x, y) x,
#define SYSCALL2(x, y, z) x,
#define SYSCALL3(x, y, z, a) x,
#define SYSCALL4(x, y, z, a, b) x,
#define SYSCALL5(x, y, z, a, b, c) x,
#include "syscall_list.h"
		__Invalid // to count the number
	};

	// wrapper definitions
#define SYSCALL0(x)                                            \
	static int x() {                                           \
		int a;                                                 \
		asm volatile("int %1"                                  \
		             : "=a"(a)                                 \
		             : "i"(InterruptNumber), "0"((u32)Id::x)); \
		return a;                                              \
	}
#define SYSCALL1(x, y)                                                        \
	static int x(y p1) {                                                      \
		int a;                                                                \
		asm volatile("int %1"                                                 \
		             : "=a"(a)                                                \
		             : "i"(InterruptNumber), "0"((u32)Id::x), "b"((iptr)p1)); \
		return a;                                                             \
	}
#define SYSCALL2(x, y, z)                                                    \
	static int x(y p1, z p2) {                                               \
		int a;                                                               \
		asm volatile("int %1"                                                \
		             : "=a"(a)                                               \
		             : "i"(InterruptNumber), "0"((u32)Id::x), "b"((iptr)p1), \
		               "c"((iptr)p2));                                       \
		return a;                                                            \
	}
#define SYSCALL3(x, y, z, a)                                                 \
	static int x(y p1, z p2, a p3) {                                         \
		int a;                                                               \
		asm volatile("int %1"                                                \
		             : "=a"(a)                                               \
		             : "i"(InterruptNumber), "0"((u32)Id::x), "b"((iptr)p1), \
		               "c"((iptr)p2), "d"((iptr)p3));                        \
		return a;                                                            \
	}
#define SYSCALL4(x, y, z, a, b)                                              \
	static int x(y p1, z p2, a p3, b p4) {                                   \
		int a;                                                               \
		asm volatile("int %1"                                                \
		             : "=a"(a)                                               \
		             : "i"(InterruptNumber), "0"((u32)Id::x), "b"((iptr)p1), \
		               "c"((iptr)p2), "d"((iptr)p3), "S"((iptr)p4));         \
		return a;                                                            \
	}
#define SYSCALL5(x, y, z, a, b, c)                                           \
	static int x(y p1, z p2, a p3, b p4, c p5) {                             \
		int a;                                                               \
		asm volatile("int %1"                                                \
		             : "=a"(a)                                               \
		             : "i"(InterruptNumber), "0"((u32)Id::x), "b"((iptr)p1), \
		               "c"((iptr)p2), "d"((iptr)p3), "S"((iptr)p4),          \
		               "D"((iptr)p5));                                       \
		return a;                                                            \
	}
#include "syscall_list.h"
};
