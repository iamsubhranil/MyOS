import sys
import string

try:
    from PIL import Image, ImageDraw, ImageFont, ImageFilter
except:
    print("[Error] This module requires 'pillow' to be installed!")
    sys.exit(1)

CHARACTERS = string.printable

def usage():
    print("Usage:\n\t%s <font_file> <font_size> <output_file>" % sys.argv[0])
    sys.exit(1)

def main():
    if len(sys.argv) < 4:
        usage()

    try:
        size = int(sys.argv[2])
    except:
        print("[Error] Invalid font size!")
        usage()

    try:
        font = ImageFont.truetype(sys.argv[1], size)
    except:
        print("[Error] Unable to load font!")
        usage()

    with open(sys.argv[3], "w") as f:
        f.write("// auto generated by %s" % sys.argv[0])
        f.write("\n\n// clang-format off")
        f.write("\n\n#pragma once\n\n#include <sys/myos.h>\n#include <drivers/font.h>\n\n")
        fn = font.getname()[0]
        fnclassname = fn.replace(" ", "")
        f.write("struct " + fnclassname + " : Font {\n\n")
        all_sizes = {ord(c): font.getsize(c) for c in CHARACTERS}
        print(all_sizes)
        normalized_height = max(all_sizes.values(), key=lambda x: x[1])[1]
        f.write("\tstatic constexpr u8 FontHeight = " + str(normalized_height) + ";\n\n");
        max_width = max(all_sizes.values(), key=lambda x: x[0])[0]
        f.write("\tstatic constexpr u8 MaxWidth = " + str(max_width) +";\n\n")
        f.write("\tstatic constexpr u8 FontSize = " + str(size) + ";\n\n")
        f.write("\tstatic constexpr const char* FontName = \"" + fn + "\";\n\n")
        f.write("\tstatic constexpr u8 FontWidths[128] = {")
        for i in range(128):
            if i in all_sizes:
                f.write(str(all_sizes[i][0]) + ",")
            else: # if the char is not printable, use the width of space
                f.write(str(all_sizes[32][0]) + ",")
        f.write("\t};\n\n")
        for i, char in enumerate(CHARACTERS):
            im = Image.new('L', (all_sizes[ord(char)][0], normalized_height))
            dim = all_sizes[ord(char)][0] * normalized_height
            draw = ImageDraw.Draw(im)
            draw.text((0,0), char, 0xFFFFFF, font)
            f.write("\tstatic constexpr u8 __f_" + str(ord(char)) +
                    "[" + str(dim) + "] = " + "{" + str(list(im.tobytes()))[1:-1].replace(" ", "") + "};\n\n")
        f.write("\tstatic constexpr u8 const* AsciiGlyphs[128] = {")
        # create the glyph table
        for i in range(128):
            if i in all_sizes:
                f.write("__f_" + str(i))
            else: # if the key is not printable, print space
                f.write("__f_32")
            f.write(",")

        f.write("\t};\n\n")

        # constructor
        f.write("\t" + fnclassname + "() : Font(AsciiGlyphs, FontWidths, FontHeight, MaxWidth, FontSize, FontName) { }\n\n")

        f.write("};")

if __name__ == "__main__":
    main()
